        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 2129 returned 100% blocks executed 100%
     2129:    6:char inputChar()
        -:    7:{
     2129:    8:    char charlib[9] = {'a','x',' ','[','(','{','}',')',']'};
     2129:    9:    int x = rand() % 9;
call    0 returned 100%
     2129:   10:    char c = charlib[x];
     2129:   11:    return c;
        -:   12:}
        -:   13:
function inputString called 2129 returned 100% blocks executed 100%
     2129:   14:char *inputString()
        -:   15:{
     2129:   16:    int charlib[4] = {114, 115, 116, 101};
        -:   17:    static char rands[6];
        -:   18:    int i;
    12774:   19:    for (i = 0; i < 5; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10645:   20:      int randInt = rand() % 4;
call    0 returned 100%
    10645:   21:      rands[i] = charlib[randInt];
        -:   22:    }
     2129:   23:    return rands;
        -:   24:}
        -:   25:
function testme called 2 returned 0% blocks executed 100%
        2:   26:void testme()
        -:   27:{
        2:   28:  int tcCount = 0;
        -:   29:  char *s;
        -:   30:  char c;
        2:   31:  int state = 0;
        -:   32:  while (1)
        -:   33:  {
     4256:   34:    tcCount++;
     2129:   35:    c = inputChar();
call    0 returned 100%
     2129:   36:    s = inputString();
call    0 returned 100%
     2129:   37:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   38:
        -:   39:
     2129:   40:    if (c == '[' && state == 0) state = 1;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2129:   41:    if (c == '(' && state == 1) state = 2;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2129:   42:    if (c == '{' && state == 2) state = 3;
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2129:   43:    if (c == ' ' && state == 3) state = 4;
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2129:   44:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2129:   45:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2129:   46:    if (c == '}' && state == 6) state = 7;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2129:   47:    if (c == ')' && state == 7) state = 8;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
     2129:   48:    if (c == ']' && state == 8) state = 9;
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   49:
     2129:   50:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
      119:   51:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
branch  2 taken 19% (fallthrough)
branch  3 taken 81%
        6:   52:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:   53:       && state == 9)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   54:    {
        2:   55:      printf("error ");
call    0 returned 100%
        2:   56:      exit(200);
call    0 returned 0%
        -:   57:    }
        -:   58:
        -:   59:  }
        -:   60:}
        -:   61:
        -:   62:
function main called 2 returned 0% blocks executed 80%
        2:   63:int main(int argc, char *argv[])
        -:   64:{
        2:   65:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        2:   66:    testme();
call    0 returned 0%
    #####:   67:    return 0;
        -:   68:}
